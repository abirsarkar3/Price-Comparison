import { type NextRequest, NextResponse } from "next/server"
import { getCartOptimization } from "@/lib/cart-optimization"
import { getUserCart } from "@/lib/cart-storage"

// Enhanced AI response generation with more features
async function generateAIResponse(message: string, language: string, optimizations: any[], cartData: any[]) {
  const responses = {
    en: {
      greeting:
        "Hello! I'm your AI shopping assistant. I can help you find the best deals, optimize your cart, compare prices, and provide delivery tips. What would you like to know?",
      optimization: `Based on your cart, I found some great savings opportunities! ${optimizations.length > 0 ? `You could save up to тВ╣${optimizations[0]?.totalSavings || 0} by splitting your purchases across different platforms.` : "Add some items to your cart and I'll help you optimize it!"}`,
      best_deals: "Here are today's best deals across platforms:\n\nЁЯФе **Zepto**: 50% off on fresh vegetables\nЁЯФе **Blinkit**: Buy 1 Get 1 on dairy products\nЁЯФе **Swiggy**: Free delivery on orders above тВ╣199\nЁЯФе **Apollo**: 20% off on medicines\n\nWould you like me to help you add any of these to your cart?",
      cart_optimize: `Let me analyze your cart with ${cartData.length} items:\n\n${cartData.length > 0 ? `ЁЯТб **Optimization Tips**:\nтАв Group items by platform to minimize delivery fees\nтАв Check for bundle deals on similar items\nтАв Consider bulk purchases for better rates\n\n${optimizations.length > 0 ? `ЁЯОп **Smart Suggestions**:\n${optimizations.map((opt, i) => `${i + 1}. ${opt.platform}: Save тВ╣${opt.savings} on ${opt.items.join(', ')}`).join('\n')}` : 'Add more items to see optimization suggestions!'}` : 'Your cart is empty! Start adding items to get optimization suggestions.'}`,
      price_compare: "I can help you compare prices across platforms! Here's what I can do:\n\nЁЯФН **Search & Compare**: Tell me what you're looking for\nЁЯУК **Price Analysis**: Get detailed price breakdowns\nЁЯТб **Best Deals**: Find the cheapest options\nЁЯЪЪ **Delivery Costs**: Include delivery fees in comparison\n\nWhat product would you like me to compare?",
      delivery_tips: "ЁЯЪЪ **Smart Delivery Tips to Save Money**:\n\n1. **Bundle Orders**: Combine items to meet free delivery thresholds\n2. **Timing**: Order during off-peak hours for faster delivery\n3. **Location**: Set your location accurately for better rates\n4. **Platforms**: Compare delivery fees across different apps\n5. **Subscriptions**: Consider monthly plans for regular items\n6. **Cashback**: Use platform-specific offers and cashback\n\nWould you like me to help you find the best delivery options for your area?",
      general:
        "I can help you compare prices, find the best deals, optimize your shopping cart, and provide delivery tips. Try asking me about specific products, cart optimization, or use the quick action buttons!",
      error: "I'm sorry, I'm having trouble processing your request right now. Please try again in a moment.",
    },
    hi: {
      greeting:
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╢реЙрдкрд┐рдВрдЧ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ рдбреАрд▓реНрд╕ рдЦреЛрдЬрдиреЗ рдФрд░ рдкреИрд╕реЗ рдмрдЪрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреА рдХрд╛рд░реНрдЯ рдХреЛ рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
      optimization: `рдЖрдкрдХреА рдХрд╛рд░реНрдЯ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдореБрдЭреЗ рдХреБрдЫ рдмреЗрд╣рддрд░реАрди рдмрдЪрдд рдХреЗ рдЕрд╡рд╕рд░ рдорд┐рд▓реЗ рд╣реИрдВ! ${optimizations.length > 0 ? `рдЖрдк рд╡рд┐рднрд┐рдиреНрди рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдкрд░ рдЕрдкрдиреА рдЦрд░реАрджрд╛рд░реА рдХреЛ рдмрд╛рдВрдЯрдХрд░ тВ╣${optimizations[0]?.totalSavings || 0} рддрдХ рдмрдЪрд╛ рд╕рдХрддреЗ рд╣реИрдВред` : "рдЕрдкрдиреА рдХрд╛рд░реНрдЯ рдореЗрдВ рдХреБрдЫ рдЖрдЗрдЯрдо рдЬреЛрдбрд╝реЗрдВ рдФрд░ рдореИрдВ рдЗрд╕реЗ рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝ рдХрд░рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛!"}`,
      best_deals: "рдпрд╣рд╛рдБ рдЖрдЬ рдХреЗ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ рдбреАрд▓реНрд╕ рд╣реИрдВ:\n\nЁЯФе **Zepto**: рддрд╛рдЬреА рд╕рдмреНрдЬрд┐рдпреЛрдВ рдкрд░ 50% рдЫреВрдЯ\nЁЯФе **Blinkit**: рдбреЗрдпрд░реА рдЙрддреНрдкрд╛рджреЛрдВ рдкрд░ 1 рдЦрд░реАрджреЗрдВ 1 рдореБрдлреНрдд\nЁЯФе **Swiggy**: тВ╣199 рд╕реЗ рдКрдкрд░ рдХреЗ рдСрд░реНрдбрд░ рдкрд░ рдореБрдлреНрдд рдбрд┐рд▓реАрд╡рд░реА\nЁЯФе **Apollo**: рджрд╡рд╛рдУрдВ рдкрд░ 20% рдЫреВрдЯ",
      cart_optimize: `рдореИрдВ рдЖрдкрдХреА ${cartData.length} рдЖрдЗрдЯрдо рд╡рд╛рд▓реА рдХрд╛рд░реНрдЯ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рддрд╛ рд╣реВрдВ:\n\n${cartData.length > 0 ? `ЁЯТб **рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝реЗрд╢рди рдЯрд┐рдкреНрд╕**:\nтАв рдбрд┐рд▓реАрд╡рд░реА рд╢реБрд▓реНрдХ рдХреЛ рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЖрдЗрдЯрдо рдХреЛ рд╕рдореВрд╣рд┐рдд рдХрд░реЗрдВ\nтАв рд╕рдорд╛рди рдЖрдЗрдЯрдореЛрдВ рдкрд░ рдмрдВрдбрд▓ рдбреАрд▓реНрд╕ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ\nтАв рдмреЗрд╣рддрд░ рджрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдмрд▓реНрдХ рдЦрд░реАрджрд╛рд░реА рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ` : 'рдЖрдкрдХреА рдХрд╛рд░реНрдЯ рдЦрд╛рд▓реА рд╣реИ! рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝реЗрд╢рди рд╕реБрдЭрд╛рд╡реЛрдВ рдХреЗ рд▓рд┐рдП рдЖрдЗрдЯрдо рдЬреЛрдбрд╝рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВред'}`,
      price_compare: "рдореИрдВ рдЖрдкрдХреЛ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдХреЗ рдмреАрдЪ рдХреАрдорддреЛрдВ рдХреА рддреБрд▓рдирд╛ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ!",
      delivery_tips: "ЁЯЪЪ **рдкреИрд╕реЗ рдмрдЪрд╛рдиреЗ рдХреЗ рд╕реНрдорд╛рд░реНрдЯ рдбрд┐рд▓реАрд╡рд░реА рдЯрд┐рдкреНрд╕**:\n\n1. **рдмрдВрдбрд▓ рдСрд░реНрдбрд░**: рдореБрдлреНрдд рдбрд┐рд▓реАрд╡рд░реА рдХреЗ рд▓рд┐рдП рдЖрдЗрдЯрдо рдХреЛ рдЬреЛрдбрд╝реЗрдВ\n2. **рд╕рдордп**: рддреЗрдЬ рдбрд┐рд▓реАрд╡рд░реА рдХреЗ рд▓рд┐рдП рдСрдл-рдкреАрдХ рдШрдВрдЯреЛрдВ рдореЗрдВ рдСрд░реНрдбрд░ рдХрд░реЗрдВ\n3. **рд╕реНрдерд╛рди**: рдмреЗрд╣рддрд░ рджрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ рд╕реНрдерд╛рди рд╕рдЯреАрдХ рд░реВрдк рд╕реЗ рд╕реЗрдЯ рдХрд░реЗрдВ",
      general:
        "рдореИрдВ рдЖрдкрдХреЛ рдХреАрдорддреЛрдВ рдХреА рддреБрд▓рдирд╛ рдХрд░рдиреЗ, рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ рдбреАрд▓реНрд╕ рдЦреЛрдЬрдиреЗ рдФрд░ рдЖрдкрдХреА рд╢реЙрдкрд┐рдВрдЧ рдХрд╛рд░реНрдЯ рдХреЛ рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред",
      error: "рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рдореБрдЭреЗ рдЕрднреА рдЖрдкрдХреЗ рдЕрдиреБрд░реЛрдз рдХреЛ рд╕рдВрд╕рд╛рдзрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдПрдХ рдХреНрд╖рдг рдореЗрдВ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
    },
    bn: {
      greeting:
        "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ AI рж╢ржкрж┐ржВ рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рзЗрж░рж╛ ржбрж┐рж▓ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ ржПржмржВ ржЕрж░рзНрже рж╕рж╛рж╢рзНрж░ржпрж╝ ржХрж░рждрзЗ ржЖржкржирж╛рж░ ржХрж╛рж░рзНржЯ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж┐ ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?",
      optimization: `ржЖржкржирж╛рж░ ржХрж╛рж░рзНржЯрзЗрж░ ржнрж┐рждрзНрждрж┐рждрзЗ, ржЖржорж┐ ржХрж┐ржЫрзБ ржжрзБрж░рзНржжрж╛ржирзНржд рж╕рж╛рж╢рзНрж░ржпрж╝рзЗрж░ рж╕рзБржпрзЛржЧ ржкрзЗржпрж╝рзЗржЫрж┐! ${optimizations.length > 0 ? `ржЖржкржирж┐ ржмрж┐ржнрж┐ржирзНржи ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржЖржкржирж╛рж░ ржХрзЗржирж╛ржХрж╛ржЯрж╛ ржнрж╛ржЧ ржХрж░рзЗ тВ╣${optimizations[0]?.totalSavings || 0} ржкрж░рзНржпржирзНржд рж╕рж╛рж╢рзНрж░ржпрж╝ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред` : "ржЖржкржирж╛рж░ ржХрж╛рж░рзНржЯрзЗ ржХрж┐ржЫрзБ ржЖржЗржЯрзЗржо ржпрзЛржЧ ржХрж░рзБржи ржПржмржВ ржЖржорж┐ ржПржЯрж┐ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржм!"}`,
      best_deals: "ржПржЦрж╛ржирзЗ ржЖржЬржХрзЗрж░ рж╕рзЗрж░рж╛ ржбрж┐рж▓ржЧрзБрж▓рж┐:\n\nЁЯФе **Zepto**: рждрж╛ржЬрж╛ рж╕ржмржЬрж┐рждрзЗ 50% ржЫрж╛ржбрж╝\nЁЯФе **Blinkit**: ржжрзБржЧрзНржзржЬрж╛ржд ржкржгрзНржпрзЗ 1 ржХрж┐ржирзБржи 1 ржмрж┐ржирж╛ржорзВрж▓рзНржпрзЗ\nЁЯФе **Swiggy**: тВ╣199 ржПрж░ ржЙржкрж░рзЗ ржЕрж░рзНржбрж╛рж░рзЗ ржмрж┐ржирж╛ржорзВрж▓рзНржпрзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐",
      cart_optimize: `ржЖржорж┐ ржЖржкржирж╛рж░ ${cartData.length} ржЖржЗржЯрзЗржорзЗрж░ ржХрж╛рж░рзНржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж┐:\n\n${cartData.length > 0 ? `ЁЯТб **ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи ржЯрж┐ржкрж╕**:\nтАв ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржлрж┐ ржХржорж╛рждрзЗ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо ржЕржирзБржпрж╛ржпрж╝рзА ржЖржЗржЯрзЗржо ржЧрзНрж░рзБржк ржХрж░рзБржи\nтАв ржПржХржЗ рж░ржХржо ржЖржЗржЯрзЗржорзЗ ржмрж╛ржирзНржбрзЗрж▓ ржбрж┐рж▓ ржЪрзЗржХ ржХрж░рзБржи` : 'ржЖржкржирж╛рж░ ржХрж╛рж░рзНржЯ ржЦрж╛рж▓рж┐! ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ ржЬржирзНржп ржЖржЗржЯрзЗржо ржпрзЛржЧ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рзБржиред'}`,
      price_compare: "ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржмрж┐ржнрж┐ржирзНржи ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржжрж╛ржо рждрзБрж▓ржирж╛ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐!",
      delivery_tips: "ЁЯЪЪ **ржЯрж╛ржХрж╛ ржмрж╛ржБржЪрж╛ржирзЛрж░ рж╕рзНржорж╛рж░рзНржЯ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЯрж┐ржкрж╕**:\n\n1. **ржмрж╛ржирзНржбрзЗрж▓ ржЕрж░рзНржбрж╛рж░**: ржмрж┐ржирж╛ржорзВрж▓рзНржпрзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рж░ ржЬржирзНржп ржЖржЗржЯрзЗржо ржПржХрждрзНрж░рж┐ржд ржХрж░рзБржи\n2. **рж╕ржоржпрж╝**: ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рж░ ржЬржирзНржп ржЕржл-ржкрж┐ржХ ржШржгрзНржЯрж╛ржпрж╝ ржЕрж░рзНржбрж╛рж░ ржХрж░рзБржи",
      general:
        "ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржжрж╛ржорзЗрж░ рждрзБрж▓ржирж╛ ржХрж░рждрзЗ, рж╕рзЗрж░рж╛ ржбрж┐рж▓ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ ржПржмржВ ржЖржкржирж╛рж░ рж╢ржкрж┐ржВ ржХрж╛рж░рзНржЯ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред",
      error: "ржЖржорж┐ ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЦржи ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрзБ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    },
  }

  const langResponses = responses[language as keyof typeof responses] || responses.en

  // Enhanced keyword matching for better responses
  const messageLower = message.toLowerCase()
  
  if (messageLower.includes("cart") || messageLower.includes("optimize") || messageLower.includes("optimization")) {
    return langResponses.cart_optimize
  } else if (messageLower.includes("best") && (messageLower.includes("deal") || messageLower.includes("offer"))) {
    return langResponses.best_deals
  } else if (messageLower.includes("price") && (messageLower.includes("compare") || messageLower.includes("comparison"))) {
    return langResponses.price_compare
  } else if (messageLower.includes("delivery") && (messageLower.includes("tip") || messageLower.includes("advice"))) {
    return langResponses.delivery_tips
  } else if (messageLower.includes("hello") || messageLower.includes("hi") || messageLower.includes("namaste")) {
    return langResponses.greeting
  } else {
    return langResponses.general
  }
}

export async function POST(request: NextRequest) {
  try {
    const { message, userId, language, conversationHistory } = await request.json()

    if (!message) {
      return NextResponse.json({ error: "Message is required" }, { status: 400 })
    }

    // Get user's cart data
    const cartData = userId ? await getUserCart(userId) : []

    // Calculate cart optimizations
    const optimizations = await getCartOptimization(cartData)

    // Generate AI response
    const aiResponse = await generateAIResponse(message, language || "en", optimizations, cartData)

    return NextResponse.json({
      message: aiResponse,
      optimizations: optimizations.slice(0, 3), // Return top 3 optimizations
      timestamp: new Date().toISOString(),
      cartSummary: {
        itemCount: cartData.length,
        totalValue: cartData.reduce((sum, item) => sum + (item.price || 0), 0),
        platforms: [...new Set(cartData.map(item => item.platform))]
      }
    })
  } catch (error) {
    console.error("AI Assistant API error:", error)
    return NextResponse.json({ error: "Failed to process request" }, { status: 500 })
  }
}
